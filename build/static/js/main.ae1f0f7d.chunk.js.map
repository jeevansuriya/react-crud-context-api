{"version":3,"sources":["components/Heading.js","context/AppReducer.js","context/GlobalState.js","components/UserList.js","components/Home.js","components/AddUser.js","components/EditUser.js","App.js","serviceWorker.js","index.js"],"names":["Heading","Navbar","color","dark","Container","NavbarBrand","href","Nav","NavItem","className","to","state","action","type","users","filter","user","id","payload","updateUser","updateUsers","map","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","removeUser","addUser","editUser","UserList","useContext","ListGroup","length","ListGroupItem","key","name","Button","onClick","Home","AddUser","useState","setName","history","useHistory","Form","onSubmit","e","preventDefault","newUser","uuid","push","FormGroup","Label","Input","onChange","target","placeholder","required","EditUser","props","selectedUser","setSelectedUser","currentUserId","match","params","useEffect","userId","find","App","setUsers","style","maxWidth","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae1f0f7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavItem,\r\n  NavbarBrand,\r\n  Container\r\n} from \"reactstrap\";\r\n\r\nexport const Heading = () => {\r\n  return (\r\n    <Navbar color=\"dark\" dark>\r\n      <Container>\r\n        <NavbarBrand href=\"/\">My Team</NavbarBrand>\r\n        <Nav>\r\n          <NavItem>\r\n            <Link className=\"btn btn-primary\" to=\"/add\">Add User</Link>\r\n          </NavItem>\r\n        </Nav>\r\n\r\n      </Container>\r\n    </Navbar>\r\n  )\r\n}\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'REMOVE_USER':\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => {\r\n          return user.id !== action.payload;\r\n        })\r\n      }\r\n    case 'ADD_USER':\r\n      return {\r\n        ...state,\r\n        users: [action.payload, ...state.users]\r\n      }\r\n    case 'EDIT_USER':\r\n      const updateUser = action.payload;\r\n\r\n      const updateUsers = state.users.map(user => {\r\n        if (user.id === updateUser.id) {\r\n          return updateUser;\r\n        }\r\n        return user;\r\n      })\r\n      return {\r\n        ...state,\r\n        users: updateUsers\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n// Initial State\r\nconst initialState = {\r\n  users: []\r\n}\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider Component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // Actions\r\n  const removeUser = (id) => {\r\n    dispatch({\r\n      type: 'REMOVE_USER',\r\n      payload: id\r\n    })\r\n  }\r\n\r\n  const addUser = (user) => {\r\n    dispatch({\r\n      type: 'ADD_USER',\r\n      payload: user\r\n    })\r\n  }\r\n\r\n  const editUser = (user) => {\r\n    dispatch({\r\n      type: 'EDIT_USER',\r\n      payload: user\r\n    })\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      users: state.users,\r\n      removeUser,\r\n      addUser,\r\n      editUser\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport const UserList = () => {\r\n  const { users, removeUser } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <ListGroup className=\"mt-4\">\r\n      {users.length > 0 ? (\r\n        <>\r\n          {users.map(user => (\r\n            <ListGroupItem className=\"d-flex\" key={user.id}>\r\n              <strong>{user.name}</strong>\r\n              <div className=\"ml-auto\">\r\n                <Link to={`/edit/${user.id}`} color=\"warning\" className=\"btn btn-warning mr-1\">Edit</Link>\r\n                <Button onClick={() => removeUser(user.id)} color=\"danger\">Delete</Button>\r\n              </div>\r\n            </ListGroupItem>\r\n          ))}\r\n        </>\r\n      ) : (\r\n          <h4 className=\"text-center\">No Users</h4>\r\n        )}\r\n    </ListGroup>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Heading } from \"./Heading\";\r\nimport { UserList } from \"./UserList\";\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <>\r\n      <Heading />\r\n      <UserList />\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport const AddUser = () => {\r\n  const [name, setName] = useState('');\r\n  const { addUser } = useContext(GlobalContext);\r\n  const history = useHistory();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newUser = {\r\n      id: uuid(),\r\n      name\r\n    }\r\n    addUser(newUser);\r\n    history.push(\"/\");\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}>\r\n      <FormGroup>\r\n        <Label>Name</Label>\r\n        <Input type=\"text\" value={name} onChange={onChange} name=\"name\" placeholder=\"Enter user\" required></Input>\r\n      </FormGroup>\r\n      <Button type=\"submit\">Submit</Button>\r\n      <Link to=\"/\" className=\"btn btn-danger ml-2\">Cancel</Link>\r\n    </Form>\r\n  )\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport const EditUser = (props) => {\r\n  const { editUser, users } = useContext(GlobalContext);\r\n  const [selectedUser, setSelectedUser] = useState({\r\n    id: '',\r\n    name: ''\r\n  })\r\n  const history = useHistory();\r\n  const currentUserId = props.match.params.id;\r\n\r\n  useEffect(() => {\r\n    const userId = currentUserId;\r\n    const selectedUser = users.find(user => user.id === userId);\r\n    setSelectedUser(selectedUser);\r\n  }, [currentUserId, users])\r\n\r\n  const onChange = (e) => {\r\n    setSelectedUser({ ...selectedUser, [e.target.name]: e.target.value })\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    editUser(selectedUser);\r\n    history.push(\"/\")\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}>\r\n      <FormGroup>\r\n        <Label>Name</Label>\r\n        <Input type=\"text\" value={selectedUser.name} onChange={onChange} name=\"name\" placeholder=\"Enter user\" required></Input>\r\n      </FormGroup>\r\n      <Button type=\"submit\">Edit Name</Button>\r\n      <Link to=\"/\" className=\"btn btn-danger ml-2\">Cancel</Link>\r\n    </Form>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Home } from \"./components/Home\";\r\nimport { AddUser } from \"./components/AddUser\";\r\nimport { EditUser } from \"./components/EditUser\";\r\nimport { GlobalProvider } from \"./context/GlobalState\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst App = () => {\r\n  const [users,setUsers] = useState()\r\n  return (\r\n    <div style={{ maxWidth: \"30rem\", margin: \"4rem auto\" }}>\r\n      <GlobalProvider>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={() => <Home users={users} setUsers={setUsers} />} />\r\n            {/* <Route exact path=\"/\" component={Home} /> */}\r\n            <Route path=\"/add\" component={AddUser} />\r\n            <Route path=\"/edit/:id\" component={EditUser} />\r\n          </Switch>\r\n        </Router>\r\n      </GlobalProvider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}